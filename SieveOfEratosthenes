// Calculate sum of all prime numbers lying between 2 given numbers
import java.util.*;
public class Main
{
	public static void main(String[] args) {
		
		if(args.length != 2){
		    System.out.println("Usage: java SumOfPrimesInRange <N1> <N2>");
            return;
		}
		
		int lb= Integer.parseInt(args[0]);
		int ub= Integer.parseInt(args[1]);
		
		// Validate the bounds
        if (lowerBound >= upperBound || lowerBound < 0 || upperBound < 0) {
            System.out.println("Invalid range. Please provide valid positive integers N1 and N2 where N1 < N2.");
            return;
        }
        
        
         // Find the sum of primes in the range [lowerBound, upperBound]
        long sum = sumOfPrimesInRange(lowerBound, upperBound);

        // Print the sum to stdout
        System.out.println(sum);
	
	}
	
	private static long sumOfPrimesInRange(int lowerBound, int upperBound) {
        boolean[] isPrime = new boolean[upperBound + 1];
        long sum = 0;

        // Initialize the isPrime array
        for (int i = 2; i <= upperBound; i++) {
            isPrime[i] = true;
        }

        // Apply the Sieve of Eratosthenes algorithm
        for (int p = 2; p * p <= upperBound; p++) {
            if (isPrime[p]) {
                for (int i = p * p; i <= upperBound; i += p) {
                    isPrime[i] = false;
                }
            }
        }

        // Calculate the sum of primes in the range [lowerBound, upperBound]
        for (int i = Math.max(2, lowerBound); i <= upperBound; i++) {
            if (isPrime[i]) {
                sum += i;
            }
        }

        return sum;
    }
}
